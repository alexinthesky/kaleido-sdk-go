// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package directory

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// DirectoryABI is the input ABI used to generate the binding from.
const DirectoryABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getAccountCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setUserDetailsEx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userId\",\"type\":\"bytes32\"}],\"name\":\"user\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"releaseAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"existsByKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"userKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getLatestAccountByName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"accountLookup\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"existsByName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setUserDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setNodeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"nodeDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"nodeChildrenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userId\",\"type\":\"bytes32\"}],\"name\":\"userOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"nodeProof\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"nodeKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userId\",\"type\":\"bytes32\"}],\"name\":\"userProfile\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"profile\",\"type\":\"address\"}],\"name\":\"setNodeDetailsEx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"versionsByKey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"nodeChild\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setNodeDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"nodeLabel\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountVersionByName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"nodeUsersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userId\",\"type\":\"bytes32\"}],\"name\":\"userName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"nodeUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nodesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"address\"},{\"name\":\"versionText\",\"type\":\"string\"}],\"name\":\"setAccountVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getLatestAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"versionsByName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"nodeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"profile\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"orgId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"version\",\"type\":\"string\"}],\"name\":\"NewAccountValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"errMessage\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"messageSender\",\"type\":\"address\"}],\"name\":\"CannotOverwriteAccount\",\"type\":\"event\"}]"

// DirectoryBin is the compiled bytecode used for deploying new contracts.
const DirectoryBin = `
`

// DeployDirectory deploys a new Ethereum contract, binding an instance of Directory to it.
func DeployDirectory(auth *bind.TransactOpts, backend bind.ContractBackend, profileProvider common.Address, claimsProvider common.Address) (common.Address, *types.Transaction, *Directory, error) {
	parsed, err := abi.JSON(strings.NewReader(DirectoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(DirectoryBin), backend, profileProvider, claimsProvider)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Directory{DirectoryCaller: DirectoryCaller{contract: contract}, DirectoryTransactor: DirectoryTransactor{contract: contract}, DirectoryFilterer: DirectoryFilterer{contract: contract}}, nil
}

// Directory is an auto generated Go binding around an Ethereum contract.
type Directory struct {
	DirectoryCaller     // Read-only binding to the contract
	DirectoryTransactor // Write-only binding to the contract
	DirectoryFilterer   // Log filterer for contract events
}

// DirectoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type DirectoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DirectoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DirectoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DirectoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DirectoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DirectorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DirectorySession struct {
	Contract     *Directory        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DirectoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DirectoryCallerSession struct {
	Contract *DirectoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// DirectoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DirectoryTransactorSession struct {
	Contract     *DirectoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// DirectoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type DirectoryRaw struct {
	Contract *Directory // Generic contract binding to access the raw methods on
}

// DirectoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DirectoryCallerRaw struct {
	Contract *DirectoryCaller // Generic read-only contract binding to access the raw methods on
}

// DirectoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DirectoryTransactorRaw struct {
	Contract *DirectoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDirectory creates a new instance of Directory, bound to a specific deployed contract.
func NewDirectory(address common.Address, backend bind.ContractBackend) (*Directory, error) {
	contract, err := bindDirectory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Directory{DirectoryCaller: DirectoryCaller{contract: contract}, DirectoryTransactor: DirectoryTransactor{contract: contract}, DirectoryFilterer: DirectoryFilterer{contract: contract}}, nil
}

// NewDirectoryCaller creates a new read-only instance of Directory, bound to a specific deployed contract.
func NewDirectoryCaller(address common.Address, caller bind.ContractCaller) (*DirectoryCaller, error) {
	contract, err := bindDirectory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DirectoryCaller{contract: contract}, nil
}

// NewDirectoryTransactor creates a new write-only instance of Directory, bound to a specific deployed contract.
func NewDirectoryTransactor(address common.Address, transactor bind.ContractTransactor) (*DirectoryTransactor, error) {
	contract, err := bindDirectory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DirectoryTransactor{contract: contract}, nil
}

// NewDirectoryFilterer creates a new log filterer instance of Directory, bound to a specific deployed contract.
func NewDirectoryFilterer(address common.Address, filterer bind.ContractFilterer) (*DirectoryFilterer, error) {
	contract, err := bindDirectory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DirectoryFilterer{contract: contract}, nil
}

// bindDirectory binds a generic wrapper to an already deployed contract.
func bindDirectory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DirectoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Directory *DirectoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Directory.Contract.DirectoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Directory *DirectoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Directory.Contract.DirectoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Directory *DirectoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Directory.Contract.DirectoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Directory *DirectoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Directory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Directory *DirectoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Directory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Directory *DirectoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Directory.Contract.contract.Transact(opts, method, params...)
}

// NodeChild is a free data retrieval call binding the contract method 0xca739ed5.
//
// Solidity: function nodeChild(parentNode bytes32, index uint8) constant returns(bytes32, string)
func (_Directory *DirectoryCaller) NodeChild(opts *bind.CallOpts, parentNode [32]byte, index uint8) ([32]byte, string, error) {
	var (
		ret0 = new([32]byte)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _Directory.contract.Call(opts, out, "nodeChild", parentNode, index)
	return *ret0, *ret1, err
}

// NodeChild is a free data retrieval call binding the contract method 0xca739ed5.
//
// Solidity: function nodeChild(parentNode bytes32, index uint8) constant returns(bytes32, string)
func (_Directory *DirectorySession) NodeChild(parentNode [32]byte, index uint8) ([32]byte, string, error) {
	return _Directory.Contract.NodeChild(&_Directory.CallOpts, parentNode, index)
}

// NodeChild is a free data retrieval call binding the contract method 0xca739ed5.
//
// Solidity: function nodeChild(parentNode bytes32, index uint8) constant returns(bytes32, string)
func (_Directory *DirectoryCallerSession) NodeChild(parentNode [32]byte, index uint8) ([32]byte, string, error) {
	return _Directory.Contract.NodeChild(&_Directory.CallOpts, parentNode, index)
}

// NodeChildrenCount is a free data retrieval call binding the contract method 0x784042b0.
//
// Solidity: function nodeChildrenCount(node bytes32) constant returns(uint256)
func (_Directory *DirectoryCaller) NodeChildrenCount(opts *bind.CallOpts, node [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Directory.contract.Call(opts, out, "nodeChildrenCount", node)
	return *ret0, err
}

// NodeChildrenCount is a free data retrieval call binding the contract method 0x784042b0.
//
// Solidity: function nodeChildrenCount(node bytes32) constant returns(uint256)
func (_Directory *DirectorySession) NodeChildrenCount(node [32]byte) (*big.Int, error) {
	return _Directory.Contract.NodeChildrenCount(&_Directory.CallOpts, node)
}

// NodeChildrenCount is a free data retrieval call binding the contract method 0x784042b0.
//
// Solidity: function nodeChildrenCount(node bytes32) constant returns(uint256)
func (_Directory *DirectoryCallerSession) NodeChildrenCount(node [32]byte) (*big.Int, error) {
	return _Directory.Contract.NodeChildrenCount(&_Directory.CallOpts, node)
}

// NodeDetails is a free data retrieval call binding the contract method 0x766a5a25.
//
// Solidity: function nodeDetails(node bytes32) constant returns(address, string, bytes32, string, uint256, uint256)
func (_Directory *DirectoryCaller) NodeDetails(opts *bind.CallOpts, node [32]byte) (common.Address, string, [32]byte, string, *big.Int, *big.Int, error) {
	var (
		ret0 = new(common.Address)
		ret1 = new(string)
		ret2 = new([32]byte)
		ret3 = new(string)
		ret4 = new(*big.Int)
		ret5 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
		ret5,
	}
	err := _Directory.contract.Call(opts, out, "nodeDetails", node)
	return *ret0, *ret1, *ret2, *ret3, *ret4, *ret5, err
}

// NodeDetails is a free data retrieval call binding the contract method 0x766a5a25.
//
// Solidity: function nodeDetails(node bytes32) constant returns(address, string, bytes32, string, uint256, uint256)
func (_Directory *DirectorySession) NodeDetails(node [32]byte) (common.Address, string, [32]byte, string, *big.Int, *big.Int, error) {
	return _Directory.Contract.NodeDetails(&_Directory.CallOpts, node)
}

// NodeDetails is a free data retrieval call binding the contract method 0x766a5a25.
//
// Solidity: function nodeDetails(node bytes32) constant returns(address, string, bytes32, string, uint256, uint256)
func (_Directory *DirectoryCallerSession) NodeDetails(node [32]byte) (common.Address, string, [32]byte, string, *big.Int, *big.Int, error) {
	return _Directory.Contract.NodeDetails(&_Directory.CallOpts, node)
}

// NodeKey is a free data retrieval call binding the contract method 0xa963b057.
//
// Solidity: function nodeKey(index uint8) constant returns(bytes32)
func (_Directory *DirectoryCaller) NodeKey(opts *bind.CallOpts, index uint8) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Directory.contract.Call(opts, out, "nodeKey", index)
	return *ret0, err
}

// NodeKey is a free data retrieval call binding the contract method 0xa963b057.
//
// Solidity: function nodeKey(index uint8) constant returns(bytes32)
func (_Directory *DirectorySession) NodeKey(index uint8) ([32]byte, error) {
	return _Directory.Contract.NodeKey(&_Directory.CallOpts, index)
}

// NodeKey is a free data retrieval call binding the contract method 0xa963b057.
//
// Solidity: function nodeKey(index uint8) constant returns(bytes32)
func (_Directory *DirectoryCallerSession) NodeKey(index uint8) ([32]byte, error) {
	return _Directory.Contract.NodeKey(&_Directory.CallOpts, index)
}

// NodeLabel is a free data retrieval call binding the contract method 0xce4d6d3c.
//
// Solidity: function nodeLabel(node bytes32) constant returns(string)
func (_Directory *DirectoryCaller) NodeLabel(opts *bind.CallOpts, node [32]byte) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Directory.contract.Call(opts, out, "nodeLabel", node)
	return *ret0, err
}

// NodeLabel is a free data retrieval call binding the contract method 0xce4d6d3c.
//
// Solidity: function nodeLabel(node bytes32) constant returns(string)
func (_Directory *DirectorySession) NodeLabel(node [32]byte) (string, error) {
	return _Directory.Contract.NodeLabel(&_Directory.CallOpts, node)
}

// NodeLabel is a free data retrieval call binding the contract method 0xce4d6d3c.
//
// Solidity: function nodeLabel(node bytes32) constant returns(string)
func (_Directory *DirectoryCallerSession) NodeLabel(node [32]byte) (string, error) {
	return _Directory.Contract.NodeLabel(&_Directory.CallOpts, node)
}

// NodeOwner is a free data retrieval call binding the contract method 0xff75542b.
//
// Solidity: function nodeOwner(node bytes32) constant returns(address)
func (_Directory *DirectoryCaller) NodeOwner(opts *bind.CallOpts, node [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Directory.contract.Call(opts, out, "nodeOwner", node)
	return *ret0, err
}

// NodeOwner is a free data retrieval call binding the contract method 0xff75542b.
//
// Solidity: function nodeOwner(node bytes32) constant returns(address)
func (_Directory *DirectorySession) NodeOwner(node [32]byte) (common.Address, error) {
	return _Directory.Contract.NodeOwner(&_Directory.CallOpts, node)
}

// NodeOwner is a free data retrieval call binding the contract method 0xff75542b.
//
// Solidity: function nodeOwner(node bytes32) constant returns(address)
func (_Directory *DirectoryCallerSession) NodeOwner(node [32]byte) (common.Address, error) {
	return _Directory.Contract.NodeOwner(&_Directory.CallOpts, node)
}

// NodeProof is a free data retrieval call binding the contract method 0xa31107e9.
//
// Solidity: function nodeProof(node bytes32) constant returns(string)
func (_Directory *DirectoryCaller) NodeProof(opts *bind.CallOpts, node [32]byte) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Directory.contract.Call(opts, out, "nodeProof", node)
	return *ret0, err
}

// NodeProof is a free data retrieval call binding the contract method 0xa31107e9.
//
// Solidity: function nodeProof(node bytes32) constant returns(string)
func (_Directory *DirectorySession) NodeProof(node [32]byte) (string, error) {
	return _Directory.Contract.NodeProof(&_Directory.CallOpts, node)
}

// NodeProof is a free data retrieval call binding the contract method 0xa31107e9.
//
// Solidity: function nodeProof(node bytes32) constant returns(string)
func (_Directory *DirectoryCallerSession) NodeProof(node [32]byte) (string, error) {
	return _Directory.Contract.NodeProof(&_Directory.CallOpts, node)
}

// NodeUser is a free data retrieval call binding the contract method 0xe6c875c9.
//
// Solidity: function nodeUser(node bytes32, index uint8) constant returns(bytes32, bytes32, address, string)
func (_Directory *DirectoryCaller) NodeUser(opts *bind.CallOpts, node [32]byte, index uint8) ([32]byte, [32]byte, common.Address, string, error) {
	var (
		ret0 = new([32]byte)
		ret1 = new([32]byte)
		ret2 = new(common.Address)
		ret3 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Directory.contract.Call(opts, out, "nodeUser", node, index)
	return *ret0, *ret1, *ret2, *ret3, err
}

// NodeUser is a free data retrieval call binding the contract method 0xe6c875c9.
//
// Solidity: function nodeUser(node bytes32, index uint8) constant returns(bytes32, bytes32, address, string)
func (_Directory *DirectorySession) NodeUser(node [32]byte, index uint8) ([32]byte, [32]byte, common.Address, string, error) {
	return _Directory.Contract.NodeUser(&_Directory.CallOpts, node, index)
}

// NodeUser is a free data retrieval call binding the contract method 0xe6c875c9.
//
// Solidity: function nodeUser(node bytes32, index uint8) constant returns(bytes32, bytes32, address, string)
func (_Directory *DirectoryCallerSession) NodeUser(node [32]byte, index uint8) ([32]byte, [32]byte, common.Address, string, error) {
	return _Directory.Contract.NodeUser(&_Directory.CallOpts, node, index)
}

// NodeUsersCount is a free data retrieval call binding the contract method 0xe10031b1.
//
// Solidity: function nodeUsersCount(node bytes32) constant returns(uint256)
func (_Directory *DirectoryCaller) NodeUsersCount(opts *bind.CallOpts, node [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Directory.contract.Call(opts, out, "nodeUsersCount", node)
	return *ret0, err
}

// NodeUsersCount is a free data retrieval call binding the contract method 0xe10031b1.
//
// Solidity: function nodeUsersCount(node bytes32) constant returns(uint256)
func (_Directory *DirectorySession) NodeUsersCount(node [32]byte) (*big.Int, error) {
	return _Directory.Contract.NodeUsersCount(&_Directory.CallOpts, node)
}

// NodeUsersCount is a free data retrieval call binding the contract method 0xe10031b1.
//
// Solidity: function nodeUsersCount(node bytes32) constant returns(uint256)
func (_Directory *DirectoryCallerSession) NodeUsersCount(node [32]byte) (*big.Int, error) {
	return _Directory.Contract.NodeUsersCount(&_Directory.CallOpts, node)
}

// NodesCount is a free data retrieval call binding the contract method 0xf1a3c5b3.
//
// Solidity: function nodesCount() constant returns(uint256)
func (_Directory *DirectoryCaller) NodesCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Directory.contract.Call(opts, out, "nodesCount")
	return *ret0, err
}

// NodesCount is a free data retrieval call binding the contract method 0xf1a3c5b3.
//
// Solidity: function nodesCount() constant returns(uint256)
func (_Directory *DirectorySession) NodesCount() (*big.Int, error) {
	return _Directory.Contract.NodesCount(&_Directory.CallOpts)
}

// NodesCount is a free data retrieval call binding the contract method 0xf1a3c5b3.
//
// Solidity: function nodesCount() constant returns(uint256)
func (_Directory *DirectoryCallerSession) NodesCount() (*big.Int, error) {
	return _Directory.Contract.NodesCount(&_Directory.CallOpts)
}

// User is a free data retrieval call binding the contract method 0x0dfb6615.
//
// Solidity: function user(userId bytes32) constant returns(bytes32, bytes32, address, string)
func (_Directory *DirectoryCaller) User(opts *bind.CallOpts, userId [32]byte) ([32]byte, [32]byte, common.Address, string, error) {
	var (
		ret0 = new([32]byte)
		ret1 = new([32]byte)
		ret2 = new(common.Address)
		ret3 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Directory.contract.Call(opts, out, "user", userId)
	return *ret0, *ret1, *ret2, *ret3, err
}

// User is a free data retrieval call binding the contract method 0x0dfb6615.
//
// Solidity: function user(userId bytes32) constant returns(bytes32, bytes32, address, string)
func (_Directory *DirectorySession) User(userId [32]byte) ([32]byte, [32]byte, common.Address, string, error) {
	return _Directory.Contract.User(&_Directory.CallOpts, userId)
}

// User is a free data retrieval call binding the contract method 0x0dfb6615.
//
// Solidity: function user(userId bytes32) constant returns(bytes32, bytes32, address, string)
func (_Directory *DirectoryCallerSession) User(userId [32]byte) ([32]byte, [32]byte, common.Address, string, error) {
	return _Directory.Contract.User(&_Directory.CallOpts, userId)
}

// UserClaims is a free data retrieval call binding the contract method 0x4aae744e.
//
// Solidity: function userClaims(userId bytes32) constant returns(address)
func (_Directory *DirectoryCaller) UserClaims(opts *bind.CallOpts, userId [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Directory.contract.Call(opts, out, "userClaims", userId)
	return *ret0, err
}

// UserClaims is a free data retrieval call binding the contract method 0x4aae744e.
//
// Solidity: function userClaims(userId bytes32) constant returns(address)
func (_Directory *DirectorySession) UserClaims(userId [32]byte) (common.Address, error) {
	return _Directory.Contract.UserClaims(&_Directory.CallOpts, userId)
}

// UserClaims is a free data retrieval call binding the contract method 0x4aae744e.
//
// Solidity: function userClaims(userId bytes32) constant returns(address)
func (_Directory *DirectoryCallerSession) UserClaims(userId [32]byte) (common.Address, error) {
	return _Directory.Contract.UserClaims(&_Directory.CallOpts, userId)
}

// UserEmail is a free data retrieval call binding the contract method 0x86133592.
//
// Solidity: function userEmail(userId bytes32) constant returns(string)
func (_Directory *DirectoryCaller) UserEmail(opts *bind.CallOpts, userId [32]byte) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Directory.contract.Call(opts, out, "userEmail", userId)
	return *ret0, err
}

// UserEmail is a free data retrieval call binding the contract method 0x86133592.
//
// Solidity: function userEmail(userId bytes32) constant returns(string)
func (_Directory *DirectorySession) UserEmail(userId [32]byte) (string, error) {
	return _Directory.Contract.UserEmail(&_Directory.CallOpts, userId)
}

// UserEmail is a free data retrieval call binding the contract method 0x86133592.
//
// Solidity: function userEmail(userId bytes32) constant returns(string)
func (_Directory *DirectoryCallerSession) UserEmail(userId [32]byte) (string, error) {
	return _Directory.Contract.UserEmail(&_Directory.CallOpts, userId)
}

// UserKey is a free data retrieval call binding the contract method 0x1c92e7ac.
//
// Solidity: function userKey(index uint8) constant returns(bytes32)
func (_Directory *DirectoryCaller) UserKey(opts *bind.CallOpts, index uint8) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Directory.contract.Call(opts, out, "userKey", index)
	return *ret0, err
}

// UserKey is a free data retrieval call binding the contract method 0x1c92e7ac.
//
// Solidity: function userKey(index uint8) constant returns(bytes32)
func (_Directory *DirectorySession) UserKey(index uint8) ([32]byte, error) {
	return _Directory.Contract.UserKey(&_Directory.CallOpts, index)
}

// UserKey is a free data retrieval call binding the contract method 0x1c92e7ac.
//
// Solidity: function userKey(index uint8) constant returns(bytes32)
func (_Directory *DirectoryCallerSession) UserKey(index uint8) ([32]byte, error) {
	return _Directory.Contract.UserKey(&_Directory.CallOpts, index)
}

// UserLookup is a free data retrieval call binding the contract method 0xfcf3fb85.
//
// Solidity: function userLookup(owner address) constant returns(bytes32, bytes32, address, string)
func (_Directory *DirectoryCaller) UserLookup(opts *bind.CallOpts, owner common.Address) ([32]byte, [32]byte, common.Address, string, error) {
	var (
		ret0 = new([32]byte)
		ret1 = new([32]byte)
		ret2 = new(common.Address)
		ret3 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Directory.contract.Call(opts, out, "userLookup", owner)
	return *ret0, *ret1, *ret2, *ret3, err
}

// UserLookup is a free data retrieval call binding the contract method 0xfcf3fb85.
//
// Solidity: function userLookup(owner address) constant returns(bytes32, bytes32, address, string)
func (_Directory *DirectorySession) UserLookup(owner common.Address) ([32]byte, [32]byte, common.Address, string, error) {
	return _Directory.Contract.UserLookup(&_Directory.CallOpts, owner)
}

// UserLookup is a free data retrieval call binding the contract method 0xfcf3fb85.
//
// Solidity: function userLookup(owner address) constant returns(bytes32, bytes32, address, string)
func (_Directory *DirectoryCallerSession) UserLookup(owner common.Address) ([32]byte, [32]byte, common.Address, string, error) {
	return _Directory.Contract.UserLookup(&_Directory.CallOpts, owner)
}

// UserOwner is a free data retrieval call binding the contract method 0x8b52aa9d.
//
// Solidity: function userOwner(userId bytes32) constant returns(address)
func (_Directory *DirectoryCaller) UserOwner(opts *bind.CallOpts, userId [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Directory.contract.Call(opts, out, "userOwner", userId)
	return *ret0, err
}

// UserOwner is a free data retrieval call binding the contract method 0x8b52aa9d.
//
// Solidity: function userOwner(userId bytes32) constant returns(address)
func (_Directory *DirectorySession) UserOwner(userId [32]byte) (common.Address, error) {
	return _Directory.Contract.UserOwner(&_Directory.CallOpts, userId)
}

// UserOwner is a free data retrieval call binding the contract method 0x8b52aa9d.
//
// Solidity: function userOwner(userId bytes32) constant returns(address)
func (_Directory *DirectoryCallerSession) UserOwner(userId [32]byte) (common.Address, error) {
	return _Directory.Contract.UserOwner(&_Directory.CallOpts, userId)
}

// UserProfile is a free data retrieval call binding the contract method 0xbcb28494.
//
// Solidity: function userProfile(userId bytes32) constant returns(address)
func (_Directory *DirectoryCaller) UserProfile(opts *bind.CallOpts, userId [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Directory.contract.Call(opts, out, "userProfile", userId)
	return *ret0, err
}

// UserProfile is a free data retrieval call binding the contract method 0xbcb28494.
//
// Solidity: function userProfile(userId bytes32) constant returns(address)
func (_Directory *DirectorySession) UserProfile(userId [32]byte) (common.Address, error) {
	return _Directory.Contract.UserProfile(&_Directory.CallOpts, userId)
}

// UserProfile is a free data retrieval call binding the contract method 0xbcb28494.
//
// Solidity: function userProfile(userId bytes32) constant returns(address)
func (_Directory *DirectoryCallerSession) UserProfile(userId [32]byte) (common.Address, error) {
	return _Directory.Contract.UserProfile(&_Directory.CallOpts, userId)
}

// UsersCount is a free data retrieval call binding the contract method 0x6ba13a82.
//
// Solidity: function usersCount() constant returns(uint256)
func (_Directory *DirectoryCaller) UsersCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Directory.contract.Call(opts, out, "usersCount")
	return *ret0, err
}

// UsersCount is a free data retrieval call binding the contract method 0x6ba13a82.
//
// Solidity: function usersCount() constant returns(uint256)
func (_Directory *DirectorySession) UsersCount() (*big.Int, error) {
	return _Directory.Contract.UsersCount(&_Directory.CallOpts)
}

// UsersCount is a free data retrieval call binding the contract method 0x6ba13a82.
//
// Solidity: function usersCount() constant returns(uint256)
func (_Directory *DirectoryCallerSession) UsersCount() (*big.Int, error) {
	return _Directory.Contract.UsersCount(&_Directory.CallOpts)
}

// SetNodeDetails is a paid mutator transaction binding the contract method 0xccaeb39b.
//
// Solidity: function setNodeDetails(parentNode bytes32, label string, proof string, owner address) returns()
func (_Directory *DirectoryTransactor) SetNodeDetails(opts *bind.TransactOpts, parentNode [32]byte, label string, proof string, owner common.Address) (*types.Transaction, error) {
	return _Directory.contract.Transact(opts, "setNodeDetails", parentNode, label, proof, owner)
}

// SetNodeDetails is a paid mutator transaction binding the contract method 0xccaeb39b.
//
// Solidity: function setNodeDetails(parentNode bytes32, label string, proof string, owner address) returns()
func (_Directory *DirectorySession) SetNodeDetails(parentNode [32]byte, label string, proof string, owner common.Address) (*types.Transaction, error) {
	return _Directory.Contract.SetNodeDetails(&_Directory.TransactOpts, parentNode, label, proof, owner)
}

// SetNodeDetails is a paid mutator transaction binding the contract method 0xccaeb39b.
//
// Solidity: function setNodeDetails(parentNode bytes32, label string, proof string, owner address) returns()
func (_Directory *DirectoryTransactorSession) SetNodeDetails(parentNode [32]byte, label string, proof string, owner common.Address) (*types.Transaction, error) {
	return _Directory.Contract.SetNodeDetails(&_Directory.TransactOpts, parentNode, label, proof, owner)
}

// SetNodeDetailsEx is a paid mutator transaction binding the contract method 0xc1e63ccf.
//
// Solidity: function setNodeDetailsEx(parentNode bytes32, label string, proof string, owner address, profileProvider address) returns()
func (_Directory *DirectoryTransactor) SetNodeDetailsEx(opts *bind.TransactOpts, parentNode [32]byte, label string, proof string, owner common.Address, profileProvider common.Address) (*types.Transaction, error) {
	return _Directory.contract.Transact(opts, "setNodeDetailsEx", parentNode, label, proof, owner, profileProvider)
}

// SetNodeDetailsEx is a paid mutator transaction binding the contract method 0xc1e63ccf.
//
// Solidity: function setNodeDetailsEx(parentNode bytes32, label string, proof string, owner address, profileProvider address) returns()
func (_Directory *DirectorySession) SetNodeDetailsEx(parentNode [32]byte, label string, proof string, owner common.Address, profileProvider common.Address) (*types.Transaction, error) {
	return _Directory.Contract.SetNodeDetailsEx(&_Directory.TransactOpts, parentNode, label, proof, owner, profileProvider)
}

// SetNodeDetailsEx is a paid mutator transaction binding the contract method 0xc1e63ccf.
//
// Solidity: function setNodeDetailsEx(parentNode bytes32, label string, proof string, owner address, profileProvider address) returns()
func (_Directory *DirectoryTransactorSession) SetNodeDetailsEx(parentNode [32]byte, label string, proof string, owner common.Address, profileProvider common.Address) (*types.Transaction, error) {
	return _Directory.Contract.SetNodeDetailsEx(&_Directory.TransactOpts, parentNode, label, proof, owner, profileProvider)
}

// SetNodeOwner is a paid mutator transaction binding the contract method 0x7161ad19.
//
// Solidity: function setNodeOwner(node bytes32, owner address) returns()
func (_Directory *DirectoryTransactor) SetNodeOwner(opts *bind.TransactOpts, node [32]byte, owner common.Address) (*types.Transaction, error) {
	return _Directory.contract.Transact(opts, "setNodeOwner", node, owner)
}

// SetNodeOwner is a paid mutator transaction binding the contract method 0x7161ad19.
//
// Solidity: function setNodeOwner(node bytes32, owner address) returns()
func (_Directory *DirectorySession) SetNodeOwner(node [32]byte, owner common.Address) (*types.Transaction, error) {
	return _Directory.Contract.SetNodeOwner(&_Directory.TransactOpts, node, owner)
}

// SetNodeOwner is a paid mutator transaction binding the contract method 0x7161ad19.
//
// Solidity: function setNodeOwner(node bytes32, owner address) returns()
func (_Directory *DirectoryTransactorSession) SetNodeOwner(node [32]byte, owner common.Address) (*types.Transaction, error) {
	return _Directory.Contract.SetNodeOwner(&_Directory.TransactOpts, node, owner)
}

// SetUserDetails is a paid mutator transaction binding the contract method 0x61212f29.
//
// Solidity: function setUserDetails(node bytes32, email string, owner address) returns()
func (_Directory *DirectoryTransactor) SetUserDetails(opts *bind.TransactOpts, node [32]byte, email string, owner common.Address) (*types.Transaction, error) {
	return _Directory.contract.Transact(opts, "setUserDetails", node, email, owner)
}

// SetUserDetails is a paid mutator transaction binding the contract method 0x61212f29.
//
// Solidity: function setUserDetails(node bytes32, email string, owner address) returns()
func (_Directory *DirectorySession) SetUserDetails(node [32]byte, email string, owner common.Address) (*types.Transaction, error) {
	return _Directory.Contract.SetUserDetails(&_Directory.TransactOpts, node, email, owner)
}

// SetUserDetails is a paid mutator transaction binding the contract method 0x61212f29.
//
// Solidity: function setUserDetails(node bytes32, email string, owner address) returns()
func (_Directory *DirectoryTransactorSession) SetUserDetails(node [32]byte, email string, owner common.Address) (*types.Transaction, error) {
	return _Directory.Contract.SetUserDetails(&_Directory.TransactOpts, node, email, owner)
}

// SetUserDetailsEx is a paid mutator transaction binding the contract method 0x82c84710.
//
// Solidity: function setUserDetailsEx(node bytes32, email string, owner address, profileProvider address, claimsProvider address) returns()
func (_Directory *DirectoryTransactor) SetUserDetailsEx(opts *bind.TransactOpts, node [32]byte, email string, owner common.Address, profileProvider common.Address, claimsProvider common.Address) (*types.Transaction, error) {
	return _Directory.contract.Transact(opts, "setUserDetailsEx", node, email, owner, profileProvider, claimsProvider)
}

// SetUserDetailsEx is a paid mutator transaction binding the contract method 0x82c84710.
//
// Solidity: function setUserDetailsEx(node bytes32, email string, owner address, profileProvider address, claimsProvider address) returns()
func (_Directory *DirectorySession) SetUserDetailsEx(node [32]byte, email string, owner common.Address, profileProvider common.Address, claimsProvider common.Address) (*types.Transaction, error) {
	return _Directory.Contract.SetUserDetailsEx(&_Directory.TransactOpts, node, email, owner, profileProvider, claimsProvider)
}

// SetUserDetailsEx is a paid mutator transaction binding the contract method 0x82c84710.
//
// Solidity: function setUserDetailsEx(node bytes32, email string, owner address, profileProvider address, claimsProvider address) returns()
func (_Directory *DirectoryTransactorSession) SetUserDetailsEx(node [32]byte, email string, owner common.Address, profileProvider common.Address, claimsProvider common.Address) (*types.Transaction, error) {
	return _Directory.Contract.SetUserDetailsEx(&_Directory.TransactOpts, node, email, owner, profileProvider, claimsProvider)
}

// DirectoryNewOwnerIterator is returned from FilterNewOwner and is used to iterate over the raw logs and unpacked data for NewOwner events raised by the Directory contract.
type DirectoryNewOwnerIterator struct {
	Event *DirectoryNewOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DirectoryNewOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DirectoryNewOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DirectoryNewOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DirectoryNewOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DirectoryNewOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DirectoryNewOwner represents a NewOwner event raised by the Directory contract.
type DirectoryNewOwner struct {
	ParentNode [32]byte
	Node       [32]byte
	Owner      common.Address
	Label      string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewOwner is a free log retrieval operation binding the contract event 0x279b80e3bd3cce25eb67f32a0002db63b95e45f5fea0496c93aefae50cef229f.
//
// Solidity: e NewOwner(parentNode indexed bytes32, node indexed bytes32, owner address, label string)
func (_Directory *DirectoryFilterer) FilterNewOwner(opts *bind.FilterOpts, parentNode [][32]byte, node [][32]byte) (*DirectoryNewOwnerIterator, error) {

	var parentNodeRule []interface{}
	for _, parentNodeItem := range parentNode {
		parentNodeRule = append(parentNodeRule, parentNodeItem)
	}
	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _Directory.contract.FilterLogs(opts, "NewOwner", parentNodeRule, nodeRule)
	if err != nil {
		return nil, err
	}
	return &DirectoryNewOwnerIterator{contract: _Directory.contract, event: "NewOwner", logs: logs, sub: sub}, nil
}

// WatchNewOwner is a free log subscription operation binding the contract event 0x279b80e3bd3cce25eb67f32a0002db63b95e45f5fea0496c93aefae50cef229f.
//
// Solidity: e NewOwner(parentNode indexed bytes32, node indexed bytes32, owner address, label string)
func (_Directory *DirectoryFilterer) WatchNewOwner(opts *bind.WatchOpts, sink chan<- *DirectoryNewOwner, parentNode [][32]byte, node [][32]byte) (event.Subscription, error) {

	var parentNodeRule []interface{}
	for _, parentNodeItem := range parentNode {
		parentNodeRule = append(parentNodeRule, parentNodeItem)
	}
	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _Directory.contract.WatchLogs(opts, "NewOwner", parentNodeRule, nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DirectoryNewOwner)
				if err := _Directory.contract.UnpackLog(event, "NewOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DirectoryNewUserIterator is returned from FilterNewUser and is used to iterate over the raw logs and unpacked data for NewUser events raised by the Directory contract.
type DirectoryNewUserIterator struct {
	Event *DirectoryNewUser // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DirectoryNewUserIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DirectoryNewUser)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DirectoryNewUser)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DirectoryNewUserIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DirectoryNewUserIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DirectoryNewUser represents a NewUser event raised by the Directory contract.
type DirectoryNewUser struct {
	UserId [32]byte
	OrgId  [32]byte
	Email  string
	Owner  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNewUser is a free log retrieval operation binding the contract event 0x38395024c961f08e23fb3be5b46bb73b51b3df560ed6c4a85009815e9d21ded4.
//
// Solidity: e NewUser(userId indexed bytes32, orgId indexed bytes32, email string, owner address)
func (_Directory *DirectoryFilterer) FilterNewUser(opts *bind.FilterOpts, userId [][32]byte, orgId [][32]byte) (*DirectoryNewUserIterator, error) {

	var userIdRule []interface{}
	for _, userIdItem := range userId {
		userIdRule = append(userIdRule, userIdItem)
	}
	var orgIdRule []interface{}
	for _, orgIdItem := range orgId {
		orgIdRule = append(orgIdRule, orgIdItem)
	}

	logs, sub, err := _Directory.contract.FilterLogs(opts, "NewUser", userIdRule, orgIdRule)
	if err != nil {
		return nil, err
	}
	return &DirectoryNewUserIterator{contract: _Directory.contract, event: "NewUser", logs: logs, sub: sub}, nil
}

// WatchNewUser is a free log subscription operation binding the contract event 0x38395024c961f08e23fb3be5b46bb73b51b3df560ed6c4a85009815e9d21ded4.
//
// Solidity: e NewUser(userId indexed bytes32, orgId indexed bytes32, email string, owner address)
func (_Directory *DirectoryFilterer) WatchNewUser(opts *bind.WatchOpts, sink chan<- *DirectoryNewUser, userId [][32]byte, orgId [][32]byte) (event.Subscription, error) {

	var userIdRule []interface{}
	for _, userIdItem := range userId {
		userIdRule = append(userIdRule, userIdItem)
	}
	var orgIdRule []interface{}
	for _, orgIdItem := range orgId {
		orgIdRule = append(orgIdRule, orgIdItem)
	}

	logs, sub, err := _Directory.contract.WatchLogs(opts, "NewUser", userIdRule, orgIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DirectoryNewUser)
				if err := _Directory.contract.UnpackLog(event, "NewUser", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DirectoryTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Directory contract.
type DirectoryTransferIterator struct {
	Event *DirectoryTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DirectoryTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DirectoryTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DirectoryTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DirectoryTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DirectoryTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DirectoryTransfer represents a Transfer event raised by the Directory contract.
type DirectoryTransfer struct {
	Node  [32]byte
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xd4735d920b0f87494915f556dd9b54c8f309026070caea5c737245152564d266.
//
// Solidity: e Transfer(node indexed bytes32, owner address)
func (_Directory *DirectoryFilterer) FilterTransfer(opts *bind.FilterOpts, node [][32]byte) (*DirectoryTransferIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _Directory.contract.FilterLogs(opts, "Transfer", nodeRule)
	if err != nil {
		return nil, err
	}
	return &DirectoryTransferIterator{contract: _Directory.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xd4735d920b0f87494915f556dd9b54c8f309026070caea5c737245152564d266.
//
// Solidity: e Transfer(node indexed bytes32, owner address)
func (_Directory *DirectoryFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DirectoryTransfer, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _Directory.contract.WatchLogs(opts, "Transfer", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DirectoryTransfer)
				if err := _Directory.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
